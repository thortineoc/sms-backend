DROP TABLE IF EXISTS Grades CASCADE;
DROP TABLE IF EXISTS Answers CASCADE;
DROP TABLE IF EXISTS Presences CASCADE;
DROP TABLE IF EXISTS Homeworks CASCADE;
DROP TABLE IF EXISTS Classes CASCADE;
DROP TABLE IF EXISTS Subjects CASCADE;
DROP TABLE IF EXISTS Groups CASCADE;
DROP TYPE IF EXISTS presence_type;
DROP FUNCTION IF EXISTS update_lastUpdatedTime() CASCADE;
DROP FUNCTION IF EXISTS preventCreatedTimeChange() CASCADE;
DROP FUNCTION IF EXISTS setTimes() CASCADE;


CREATE TYPE presence_type AS ENUM (
    'present',
    'absent',
    'late',
    'excused'
    );



CREATE TABLE Answers
(
    id              SERIAL PRIMARY KEY,
    homework_id     int         NOT NULL,
    student_id      varchar(63) NOT NULL,
    review          TEXT,
    file            bytea,
    createdTime     timestamp DEFAULT now(),
    lastUpdatedTime timestamp DEFAULT now(),
    isRated         boolean   DEFAULT false
);

CREATE TABLE AnswersFiles
(
    id        SERIAL PRIMARY KEY,
    answer_id int  NOT NULL,
    filename  varchar(255) NOT NULL,
    size      int          NOT NULL,
    file      bytea        NOT NULL
);

CREATE TABLE Classes
(
    id         SERIAL PRIMARY KEY,
    groups     varchar(15) NOT NULL,
    subject    varchar(63) NOT NULL,
    teacher_id varchar(63) NOT NULL,
    weekday    int         NOT NULL,
    room       int         NOT NULL,
    beginDate  date        NOT NULL,
    endDate    date        NOT NULL,
    lesson     int         NOT NULL
);

CREATE TABLE Grades
(
    id              SERIAL PRIMARY KEY,
    subject         varchar(63)   NOT NULL,
    teacher_id      varchar(63)   NOT NULL,
    student_id      varchar(63)   NOT NULL,
    grade           numeric(3, 2) NOT NULL,
    description     TEXT,
    weight          int       DEFAULT 1,
    final           boolean   DEFAULT false,
    createdTime     timestamp DEFAULT now(),
    lastUpdatedTime timestamp DEFAULT now()
);

CREATE TABLE Groups
(
    name varchar(15) PRIMARY KEY
);


CREATE TABLE Homeworks
(
    id              SERIAL PRIMARY KEY,
    title           varchar(255) NOT NULL,
    groups          varchar(15)  NOT NULL,
    subject         varchar(63)  NOT NULL,
    deadline        timestamp    NOT NULL,
    teacher_id      varchar(63)  NOT NULL,
    description     TEXT,
    file            bytea,
    createdTime     timestamp DEFAULT now(),
    lastUpdatedTime timestamp DEFAULT now(),
    toEvaluate      boolean   DEFAULT false
);

CREATE TABLE HomeworksFiles
(
    id          SERIAL PRIMARY KEY,
    homework_id int  NOT NULL,
    filename    varchar(255) NOT NULL,
    size        int          NOT NULL,
    file        bytea        NOT NULL
);

CREATE TABLE Presences
(
    id         SERIAL PRIMARY KEY,
    student_id varchar(63) NOT NULL,
    class_id   int         NOT NULL,
    day        date        NOT NULL,
    type       presence_type DEFAULT 'present'
);

CREATE TABLE Subjects
(
    name varchar(63) PRIMARY KEY
);




ALTER TABLE Answers
    ADD CONSTRAINT fk_answers_homework_id
        FOREIGN KEY (homework_id)
            REFERENCES Homeworks (id)
            ON DELETE CASCADE;

ALTER TABLE AnswersFiles
    ADD CONSTRAINT fk_answersfiles_answer_id
        FOREIGN KEY (answer_id)
            REFERENCES Answers (id)
            ON DELETE CASCADE;

ALTER TABLE Classes
    ADD CONSTRAINT fk_classes_subject
        FOREIGN KEY (subject)
            REFERENCES Subjects (name)
            ON DELETE CASCADE;

ALTER TABLE Classes
    ADD CONSTRAINT fk_classes_groups
        FOREIGN KEY (groups)
            REFERENCES Groups (name)
            ON DELETE CASCADE;

ALTER TABLE Grades
    ADD CONSTRAINT fk_grades_subject
        FOREIGN KEY (subject)
            REFERENCES Subjects (name)
            ON DELETE SET NULL;

ALTER TABLE Homeworks
    ADD CONSTRAINT fk_homeworks_subject
        FOREIGN KEY (subject)
            REFERENCES Subjects (name)
            ON DELETE CASCADE;

ALTER TABLE Homeworks
    ADD CONSTRAINT fk_homeworks_group
        FOREIGN KEY (groups)
            REFERENCES Groups (name)
            ON DELETE CASCADE;

ALTER TABLE HomeworksFiles
    ADD CONSTRAINT fk_homeworksfiles_homework_id
        FOREIGN KEY (homework_id)
            REFERENCES Homeworks (id)
            ON DELETE CASCADE;

ALTER TABLE Presences
    ADD CONSTRAINT fk_presences_class_id
        FOREIGN KEY (class_id)
            REFERENCES Classes (id)
            ON DELETE CASCADE;




CREATE OR REPLACE FUNCTION update_lastUpdatedTime()
    RETURNS TRIGGER AS
$$
BEGIN
    NEW.lastUpdatedTime = now();
    RETURN NEW;
END;
$$ language 'plpgsql';

CREATE TRIGGER updateAnswersTimestamp
    BEFORE UPDATE
    ON Answers
    FOR EACH ROW
EXECUTE PROCEDURE
    update_lastUpdatedTime();

CREATE TRIGGER updateGradesTimestamp
    BEFORE UPDATE
    ON Grades
    FOR EACH ROW
EXECUTE PROCEDURE
    update_lastUpdatedTime();

CREATE TRIGGER updateHomeworksTimestamp
    BEFORE UPDATE
    ON Homeworks
    FOR EACH ROW
EXECUTE PROCEDURE
    update_lastUpdatedTime();


CREATE OR REPLACE FUNCTION set_Times()
    RETURNS TRIGGER AS
$$
BEGIN
    NEW.lastUpdatedTime = now();
    NEW.createdTime = now();
    RETURN NEW;
END;
$$ language 'plpgsql';

CREATE TRIGGER setGradesTimes
    BEFORE INSERT
    ON Grades
    FOR EACH ROW
EXECUTE PROCEDURE
    set_Times();

CREATE TRIGGER setHomeworksTimes
    BEFORE INSERT
    ON Homeworks
    FOR EACH ROW
EXECUTE PROCEDURE
    set_Times();

CREATE TRIGGER setAnswersTimes
    BEFORE INSERT
    ON Answers
    FOR EACH ROW
EXECUTE PROCEDURE
    set_Times();


CREATE OR REPLACE FUNCTION prevent_CreatedTimeChange()
    RETURNS TRIGGER AS
$$
BEGIN
    NEW.createdTime = OLD.createdTime;
    RETURN NEW;
END;
$$ language 'plpgsql';

CREATE TRIGGER preventAnswersCreatedTimeChange
    BEFORE INSERT
    ON Answers
    FOR EACH ROW
EXECUTE PROCEDURE
    prevent_CreatedTimeChange();

CREATE TRIGGER preventGradesCreatedTimeChange
    BEFORE INSERT
    ON Grades
    FOR EACH ROW
EXECUTE PROCEDURE
    prevent_CreatedTimeChange();

CREATE TRIGGER preventHomeworksCreatedTimeChange
    BEFORE INSERT
    ON Homeworks
    FOR EACH ROW
EXECUTE PROCEDURE
    prevent_CreatedTimeChange();
